from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QComboBox, QDateEdit,
    QPushButton, QMessageBox, QFormLayout, QSizePolicy, QTableWidget,
    QTableWidgetItem, QStackedWidget
)
from PyQt5.QtCore import QDate, Qt, pyqtSignal
import psycopg2

def get_db_connection():
    return psycopg2.connect(
        host="localhost",
        database="SAMPLE",
        user="postgres",
        password="123"
    )

class MedicationPage(QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("MedPageBg")
        self.stack = QStackedWidget(self)
        self.records_page = MedicationRecordsPage(self.stack)
        self.add_page = AddMedicationPage(self.stack)
        self.add_page.medication_added.connect(self.show_records_page)
        self.stack.addWidget(self.records_page)
        self.stack.addWidget(self.add_page)

        layout = QVBoxLayout(self)
        layout.addWidget(self.stack)
        self.setLayout(layout)
        self.show_records_page()
        self.setStyleSheet("""
            QWidget#MedPageBg {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #FED6C8, stop:1 #F9E6DC);
            }
        """)

    def show_add_page(self):
        self.stack.setCurrentWidget(self.add_page)

    def show_records_page(self):
        self.records_page.load_data()
        self.stack.setCurrentWidget(self.records_page)

class MedicationRecordsPage(QWidget):
    def __init__(self, parent_stack):
        super().__init__()
        self.parent_stack = parent_stack
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(16)

        title = QLabel("Medication Records")
        title.setStyleSheet("""
            font-size: 28px;
            font-weight: bold;
            background: #FFE1D3;
            border-radius: 10px;
            padding: 10px;
            color: #3a2b23;
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        add_btn = QPushButton("Add Medication")
        add_btn.setFixedWidth(180)
        add_btn.setFixedHeight(36)
        add_btn.setStyleSheet("""
            QPushButton {
                background-color: #D295BF; color: white;
                font-size: 16px; border-radius: 8px;
                font-weight: 600;
            }
            QPushButton:hover { background: #BA74AD; }
        """)
        add_btn.clicked.connect(self.goto_add_medication)
        layout.addWidget(add_btn, alignment=Qt.AlignRight)

        self.table = QTableWidget()
        self.table.setColumnCount(8)
        self.table.setHorizontalHeaderLabels([
            "Student ID", "Medication", "Dosage", "Frequency", "Start Date", "End Date", "Notes", "Actions"
        ])
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: #FEF1EA;
                font-size: 16px;
                border: 2px solid #FED6C8;
            }
            QTableWidget::item {
                font-size: 16px;
            }
            QHeaderView::section {
                font-size: 17px;
                font-weight: bold;
                background-color: #FED6C8;
                border: 1.5px solid #D295BF;
                color: #3a2b23;
            }
            QTableCornerButton::section {
                background-color: #FED6C8;
                border: 1.5px solid #D295BF;
            }
        """)
        self.table.verticalHeader().setVisible(False)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.table)
        self.setLayout(layout)

    def goto_add_medication(self):
        self.parent_stack.widget(1).med_id = None
        self.parent_stack.widget(1).clear_fields()
        self.parent_stack.setCurrentIndex(1)

    def load_data(self):
        self.table.setRowCount(0)
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                SELECT med_id, stud_id, med_name, med_dosage, med_frequency,
                       med_start_date, med_end_date, notes
                FROM medication
                ORDER BY med_start_date DESC
            """)
            rows = cur.fetchall()
            self.table.setRowCount(len(rows))
            for row_idx, row in enumerate(rows):
                for col_idx, val in enumerate(row[1:]):  # skip med_id
                    self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(val) if val is not None else ""))
                # --- Action Buttons ---
                edit_btn = QPushButton("Edit")
                delete_btn = QPushButton("Delete")
                edit_btn.setStyleSheet("""
                    QPushButton { background:#a3d5ff; border-radius:5px; }
                    QPushButton:hover { background:#82c7e6; }
                """)
                delete_btn.setStyleSheet("""
                    QPushButton { background:#ff9999; border-radius:5px; }
                    QPushButton:hover { background:#e08888; }
                """)
                edit_btn.clicked.connect(lambda _, r=row: self.edit_medication(r))
                delete_btn.clicked.connect(lambda _, med_id=row[0]: self.delete_medication(med_id))
                btn_layout = QHBoxLayout()
                btn_layout.addWidget(edit_btn)
                btn_layout.addWidget(delete_btn)
                btn_layout.setContentsMargins(0,0,0,0)
                btn_layout.setSpacing(5)
                btn_widget = QWidget()
                btn_widget.setLayout(btn_layout)
                self.table.setCellWidget(row_idx, 7, btn_widget)
            cur.close()
            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to load medication data: {e}")

    def edit_medication(self, row):
        edit_page = self.parent_stack.widget(1)
        edit_page.fill_fields(*row[1:], med_id=row[0])
        self.parent_stack.setCurrentWidget(edit_page)

    def delete_medication(self, med_id):
        confirm = QMessageBox.question(self, "Delete Medication", "Are you sure you want to delete this record?",
                                       QMessageBox.Yes | QMessageBox.No)
        if confirm == QMessageBox.Yes:
            try:
                conn = get_db_connection()
                cur = conn.cursor()
                cur.execute("DELETE FROM medication WHERE med_id=%s", (med_id,))
                conn.commit()
                cur.close()
                conn.close()
                self.load_data()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to delete medication: {e}")

class AddMedicationPage(QWidget):
    medication_added = pyqtSignal()

    def __init__(self, parent_stack):
        super().__init__()
        self.parent_stack = parent_stack
        self.med_id = None
        self.init_ui()

    def init_ui(self):
        # Outer layout for centering
        outer = QVBoxLayout(self)
        outer.setContentsMargins(0, 0, 0, 0)
        outer.addStretch(1)

        # Card container
        card = QWidget()
        card.setStyleSheet("""
            background: #fff8f4;
            border-radius: 24px;
            padding: 40px 60px;
            max-width: 500px;
            min-width: 400px;
            border: 1.5px solid #ffe1d3;
            box-shadow: 0px 4px 24px #d295bf44;
        """)
        card_layout = QVBoxLayout(card)
        card_layout.setSpacing(24)

        # Title
        title = QLabel("Add Medication")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            font-size: 32px; font-weight: bold; color:#BA74AD; margin-bottom: 12px;
        """)
        card_layout.addWidget(title)

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
        form_layout.setFormAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        form_layout.setSpacing(16)

        # Fields
        self.stud_id = QLineEdit()
        self.stud_id.setPlaceholderText("Enter Student LRN/ID")
        self.stud_id.setStyleSheet(self._editfield_css())
        form_layout.addRow(self._star("Student ID"), self.stud_id)

        self.med_name = QLineEdit()
        self.med_name.setPlaceholderText("e.g. Paracetamol")
        self.med_name.setStyleSheet(self._editfield_css())
        form_layout.addRow(self._star("Medication Name"), self.med_name)

        self.med_dosage = QLineEdit()
        self.med_dosage.setPlaceholderText("e.g. 500mg, 5ml")
        self.med_dosage.setStyleSheet(self._editfield_css())
        form_layout.addRow(self._star("Dosage"), self.med_dosage)

        self.med_frequency = QComboBox()
        self.med_frequency.setStyleSheet(self._editfield_css())
        self.med_frequency.addItems(["Select frequency...", "Once a day", "Twice a day", "Thrice a day", "As needed"])
        form_layout.addRow(self._star("Frequency"), self.med_frequency)

        self.med_start_date = QDateEdit(QDate.currentDate())
        self.med_start_date.setCalendarPopup(True)
        self.med_start_date.setStyleSheet(self._editfield_css())
        form_layout.addRow(self._star("Start Date"), self.med_start_date)

        self.med_end_date = QDateEdit(QDate.currentDate())
        self.med_end_date.setCalendarPopup(True)
        self.med_end_date.setStyleSheet(self._editfield_css())
        form_layout.addRow(self._star("End Date"), self.med_end_date)

        self.notes = QLineEdit()
        self.notes.setPlaceholderText("Any notes (optional)")
        self.notes.setStyleSheet(self._editfield_css())
        form_layout.addRow(QLabel("Notes"), self.notes)

        card_layout.addLayout(form_layout)

        # Button row
        btn_row = QHBoxLayout()
        btn_row.addStretch(1)
        save_btn = QPushButton("ðŸ’¾  Save Medication")
        save_btn.setStyleSheet("""
            QPushButton {
                background:#BA74AD; color:white; font-size: 17px; font-weight:bold;
                padding: 10px 26px; border-radius: 10px; min-width:160px;
            }
            QPushButton:hover { background: #d295bf; }
        """)
        save_btn.clicked.connect(self.save_medication)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setStyleSheet("""
            QPushButton {
                background:#b0b0b0; color:white; font-size: 17px;
                padding: 10px 26px; border-radius: 10px; min-width:120px;
            }
            QPushButton:hover { background: #888;}
        """)
        cancel_btn.clicked.connect(self.go_back)
        btn_row.addWidget(save_btn)
        btn_row.addWidget(cancel_btn)
        card_layout.addLayout(btn_row)

        outer.addWidget(card, alignment=Qt.AlignHCenter)
        outer.addStretch(1)
        self.setLayout(outer)

    def _star(self, text):
        label = QLabel(f"{text} <span style='color:#ff3b3b;'>*</span>")
        label.setStyleSheet("font-size: 16px;")
        return label

    def _editfield_css(self):
        return """
            QLineEdit, QComboBox, QDateEdit {
                font-size: 16px;
                background: #fff6f0;
                border: 2px solid #d295bf;
                border-radius: 6px;
                padding: 8px 10px;
                min-height: 32px;
            }
        """

    def fill_fields(self, stud_id, med_name, med_dosage, med_frequency, med_start_date, med_end_date, notes, med_id=None):
        self.stud_id.setText(str(stud_id))
        self.med_name.setText(str(med_name))
        self.med_dosage.setText(str(med_dosage))
        ix = self.med_frequency.findText(str(med_frequency))
        self.med_frequency.setCurrentIndex(ix if ix > 0 else 0)
        if med_start_date and str(med_start_date) != "None":
            self.med_start_date.setDate(QDate.fromString(str(med_start_date), "yyyy-MM-dd"))
        if med_end_date and str(med_end_date) != "None":
            self.med_end_date.setDate(QDate.fromString(str(med_end_date), "yyyy-MM-dd"))
        self.notes.setText(str(notes))
        self.med_id = med_id

    def clear_fields(self):
        self.stud_id.clear()
        self.med_name.clear()
        self.med_dosage.clear()
        self.med_frequency.setCurrentIndex(0)
        self.med_start_date.setDate(QDate.currentDate())
        self.med_end_date.setDate(QDate.currentDate())
        self.notes.clear()
        self.med_id = None

    def save_medication(self):
        sid = self.stud_id.text().strip()
        name = self.med_name.text().strip()
        dosage = self.med_dosage.text().strip()
        freq = self.med_frequency.currentText()
        sdate = self.med_start_date.date().toString("yyyy-MM-dd")
        edate = self.med_end_date.date().toString("yyyy-MM-dd")
        notes = self.notes.text().strip()

        if not sid or not name or not dosage or self.med_frequency.currentIndex() == 0:
            QMessageBox.warning(self, "Missing Information", "Please fill all required fields.")
            return
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            if self.med_id:
                cur.execute("""
                    UPDATE medication
                    SET stud_id=%s, med_name=%s, med_dosage=%s, med_frequency=%s,
                        med_start_date=%s, med_end_date=%s, notes=%s, updated_at=NOW()
                    WHERE med_id=%s
                """, (sid, name, dosage, freq, sdate, edate, notes, self.med_id))
            else:
                cur.execute("""
                    INSERT INTO medication (stud_id, med_name, med_dosage, med_frequency, med_start_date, med_end_date, notes)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (sid, name, dosage, freq, sdate, edate, notes))
            conn.commit()
            cur.close()
            conn.close()
            QMessageBox.information(self, "Success", "Medication saved successfully!")
            self.medication_added.emit()
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Could not save medication: {e}")

    def go_back(self):
        self.parent_stack.setCurrentIndex(0)
