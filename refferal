from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QPushButton, QTableWidget, QTableWidgetItem,
    QHBoxLayout, QLineEdit, QTextEdit, QDateEdit, QMessageBox, QFormLayout, QFileDialog
)
from PyQt5.QtCore import Qt, QDate
import psycopg2
from docx import Document
from datetime import datetime

def get_db_connection():
    return psycopg2.connect(
        host="localhost",
        database="SAMPLE",
        user="postgres",
        password="123"
    )

class ReferralPage(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(16)

        title = QLabel("Student Referrals")
        title.setStyleSheet("font-size: 28px; font-weight: bold; background: #FFE1D3; border-radius: 10px; padding: 10px; color: #3a2b23;")
        layout.addWidget(title)

        add_btn = QPushButton("Add Referral")
        add_btn.clicked.connect(self.show_add_referral_form)
        layout.addWidget(add_btn, alignment=Qt.AlignRight)

        self.table = QTableWidget()
        self.table.setColumnCount(7)
        self.table.setHorizontalHeaderLabels([
            "Student ID", "Date", "Reason", "Referred To", "Status", "Notes", "Actions"
        ])
        layout.addWidget(self.table)
        self.setLayout(layout)
        self.load_data()

    def load_data(self):
        self.table.setRowCount(0)
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                SELECT referral_id, stud_id, referral_date, referral_reason, referral_to, referral_status, notes
                FROM referral
                ORDER BY referral_date DESC
            """)
            rows = cur.fetchall()
            self.table.setRowCount(len(rows))
            for row_idx, row in enumerate(rows):
                # row = (referral_id, stud_id, referral_date, referral_reason, referral_to, referral_status, notes)
                for col_idx, val in enumerate(row[1:]):  # skip referral_id
                    self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(val) if val is not None else ""))
                # Add "Generate Docx" button
                btn = QPushButton("Generate DOCX")
                btn.clicked.connect(lambda _, r=row: self.generate_referral_docx(r))
                btn_layout = QHBoxLayout()
                btn_layout.addWidget(btn)
                btn_layout.setContentsMargins(0,0,0,0)
                btn_widget = QWidget()
                btn_widget.setLayout(btn_layout)
                self.table.setCellWidget(row_idx, 6, btn_widget)
            cur.close()
            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to load referrals: {e}")

    def show_add_referral_form(self):
        self.add_form = AddReferralForm(self)
        self.add_form.show()

    def generate_referral_docx(self, referral_row):
        # referral_row = (referral_id, stud_id, referral_date, referral_reason, referral_to, referral_status, notes)
        referral = {
            "referral_id": referral_row[0],
            "stud_id": referral_row[1],
            "referral_date": str(referral_row[2]),
            "referral_reason": referral_row[3],
            "referral_to": referral_row[4],
            "referral_status": referral_row[5],
            "notes": referral_row[6]
        }
        # Fetch student info
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                SELECT stud_id, stud_fname, stud_mname, stud_lname, year_level_id, section_id
                FROM student
                WHERE stud_id = %s
            """, (referral["stud_id"],))
            stu = cur.fetchone()
            if not stu:
                QMessageBox.warning(self, "Student Not Found", f"No student found for ID {referral['stud_id']}")
                return
            student = {
                "stud_id": stu[0],
                "stud_fname": stu[1],
                "stud_mname": stu[2] or "",
                "stud_lname": stu[3],
                "year_level_id": stu[4],
                "section_id": stu[5]
            }
            # Optional: get year level and section names
            year_level_name = ""
            section_name = ""
            if student["year_level_id"]:
                cur.execute("SELECT year_level_name FROM year_level WHERE year_level_id=%s", (student["year_level_id"],))
                yl = cur.fetchone()
                year_level_name = yl[0] if yl else ""
            if student["section_id"]:
                cur.execute("SELECT section_name FROM section WHERE section_id=%s", (student["section_id"],))
                sc = cur.fetchone()
                section_name = sc[0] if sc else ""
            student["year_level_name"] = year_level_name
            student["section_name"] = section_name

            cur.close()
            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Could not fetch student info: {e}")
            return

        # Ask user where to save
        default_filename = f"Referral_{student['stud_id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        save_path, _ = QFileDialog.getSaveFileName(self, "Save Referral DOCX", default_filename, "Word Documents (*.docx)")
        if not save_path:
            return

        try:
            doc = Document()
            doc.add_heading('School Clinic Referral Form', 0)
            doc.add_paragraph(f"Date: {referral['referral_date']}")
            doc.add_paragraph(f"Student Name: {student['stud_fname']} {student['stud_mname']} {student['stud_lname']}")
            doc.add_paragraph(f"Student ID: {student['stud_id']}")
            doc.add_paragraph(f"Year Level: {student['year_level_name']}")
            doc.add_paragraph(f"Section: {student['section_name']}")
            doc.add_paragraph(f"Referral To: {referral['referral_to']}")
            doc.add_paragraph(f"Reason for Referral: {referral['referral_reason']}")
            doc.add_paragraph(f"Status: {referral['referral_status']}")
            doc.add_paragraph(f"Notes: {referral['notes']}")
            doc.add_paragraph("\nSignature: ___________________________")
            doc.add_paragraph("Clinic Staff")

            doc.save(save_path)
            QMessageBox.information(self, "Referral Doc Created", f"Referral document saved as:\n{save_path}")
        except Exception as e:
            QMessageBox.critical(self, "DOCX Error", f"Could not generate referral document: {e}")

class AddReferralForm(QWidget):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.setWindowTitle("Add Referral")
        self.setFixedSize(400, 400)
        layout = QVBoxLayout(self)
        form = QFormLayout()
        self.stud_id = QLineEdit()
        self.referral_date = QDateEdit(QDate.currentDate())
        self.referral_date.setCalendarPopup(True)
        self.reason = QLineEdit()
        self.ref_to = QLineEdit()
        self.status = QLineEdit()
        self.notes = QTextEdit()
        form.addRow("Student ID:", self.stud_id)
        form.addRow("Date:", self.referral_date)
        form.addRow("Reason:", self.reason)
        form.addRow("Referred To:", self.ref_to)
        form.addRow("Status:", self.status)
        form.addRow("Notes:", self.notes)
        layout.addLayout(form)
        btn = QPushButton("Save Referral")
        btn.clicked.connect(self.save_referral)
        layout.addWidget(btn)

    def save_referral(self):
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO referral (stud_id, referral_date, referral_reason, referral_to, referral_status, notes, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, NOW())
            """, (
                self.stud_id.text(),
                self.referral_date.date().toString("yyyy-MM-dd"),
                self.reason.text(),
                self.ref_to.text(),
                self.status.text(),
                self.notes.toPlainText()
            ))
            conn.commit()
            cur.close()
            conn.close()
            QMessageBox.information(self, "Success", "Referral saved.")
            self.close()
            self.parent.load_data()
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Could not save referral: {e}")
