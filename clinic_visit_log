from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QTableWidget, QTableWidgetItem, QPushButton,
    QMessageBox, QHBoxLayout, QLineEdit, QDialog, QFormLayout, QDateEdit, QTimeEdit, QFileDialog
)
from PyQt5.QtCore import Qt, QDate, QTime
import psycopg2
import csv

def get_db_connection():
    return psycopg2.connect(
        host="localhost",
        database="SAMPLE",
        user="postgres",
        password="123"
    )

class AddEditDialog(QDialog):
    def __init__(self, parent=None, record=None):
        super().__init__(parent)
        self.setWindowTitle("Add/Edit Clinic Visit")
        self.setStyleSheet("""
            QDialog {
                background: #fff8f4;
            }
        """)
        layout = QVBoxLayout(self)
        card = QWidget()
        card.setStyleSheet("""
            background: #fff8f4;
            border-radius: 24px;
            padding: 30px 40px;
            min-width: 350px;
            border: 1.5px solid #ffe1d3;
            box-shadow: 0px 4px 24px #d295bf44;
        """)
        form = QFormLayout(card)
        form.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
        form.setFormAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        form.setSpacing(16)

        self.stud_id = QLineEdit()
        self.stud_id.setPlaceholderText("Enter Student LRN/ID")
        self.stud_id.setStyleSheet(self._editfield_css())
        form.addRow(self._star("Student ID"), self.stud_id)

        self.visit_date = QDateEdit()
        self.visit_date.setCalendarPopup(True)
        self.visit_date.setDate(QDate.currentDate())
        self.visit_date.setStyleSheet(self._editfield_css())
        form.addRow(self._star("Visit Date"), self.visit_date)

        self.reason = QLineEdit()
        self.reason.setPlaceholderText("e.g. Headache, Injury")
        self.reason.setStyleSheet(self._editfield_css())
        form.addRow(self._star("Reason"), self.reason)

        self.time_in = QTimeEdit()
        self.time_in.setDisplayFormat("HH:mm")
        self.time_in.setStyleSheet(self._editfield_css())
        form.addRow(self._star("Time In"), self.time_in)

        self.time_out = QTimeEdit()
        self.time_out.setDisplayFormat("HH:mm")
        self.time_out.setStyleSheet(self._editfield_css())
        form.addRow(self._star("Time Out"), self.time_out)

        btn_row = QHBoxLayout()
        btn_row.addStretch(1)
        self.save_btn = QPushButton("ðŸ’¾  Save")
        self.save_btn.setStyleSheet("""
            QPushButton {
                background:#BA74AD; color:white; font-size: 17px; font-weight:bold;
                padding: 8px 22px; border-radius: 10px; min-width:100px;
            }
            QPushButton:hover { background: #d295bf; }
        """)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.setStyleSheet("""
            QPushButton {
                background:#b0b0b0; color:white; font-size: 17px;
                padding: 8px 22px; border-radius: 10px; min-width:100px;
            }
            QPushButton:hover { background: #888;}
        """)
        btn_row.addWidget(self.save_btn)
        btn_row.addWidget(self.cancel_btn)
        form.addRow(btn_row)

        self.save_btn.clicked.connect(self.accept)
        self.cancel_btn.clicked.connect(self.reject)

        if record:
            self.stud_id.setText(str(record[0]))
            self.visit_date.setDate(record[2])
            self.reason.setText(record[3])
            self.time_in.setTime(record[4])
            self.time_out.setTime(record[5])

        layout.addWidget(card)

    def _star(self, text):
        label = QLabel(f"{text} <span style='color:#ff3b3b;'>*</span>")
        label.setStyleSheet("font-size: 16px;")
        return label

    def _editfield_css(self):
        return """
            QLineEdit, QComboBox, QDateEdit, QTimeEdit {
                font-size: 16px;
                background: #fff6f0;
                border: 2px solid #d295bf;
                border-radius: 6px;
                padding: 8px 10px;
                min-height: 32px;
            }
        """

    def get_data(self):
        return (
            self.stud_id.text(),
            self.visit_date.date().toString("yyyy-MM-dd"),
            self.reason.text(),
            self.time_in.time().toString("HH:mm"),
            self.time_out.time().toString("HH:mm"),
        )

class ClinicVisitLog(QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("ClinicVisitLogBg")
        layout = QVBoxLayout(self)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(16)

        title = QLabel("Clinic Visit Log")
        title.setStyleSheet("""
            font-size: 28px;
            font-weight: bold;
            background: #FFE1D3;
            border-radius: 10px;
            padding: 10px;
            color: #3a2b23;
        """)
        layout.addWidget(title)

        # Top controls
        top_bar = QHBoxLayout()
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search by Student ID, Name, or Reason...")
        self.search_box.setStyleSheet("""
            QLineEdit {
                font-size: 15px;
                border: 2px solid #d295bf;
                border-radius: 7px;
                padding: 8px 10px;
                min-width: 200px;
                background: #fff6f0;
            }
        """)
        self.search_box.textChanged.connect(self.search_table)
        top_bar.addWidget(self.search_box)

        self.add_btn = QPushButton("Add")
        self.edit_btn = QPushButton("Edit")
        self.delete_btn = QPushButton("Delete")
        self.export_btn = QPushButton("Export CSV")
        self.refresh_btn = QPushButton("Refresh")
        for btn in [self.add_btn, self.edit_btn, self.delete_btn, self.export_btn, self.refresh_btn]:
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #D295BF; color: white;
                    font-size: 15px; border-radius: 8px;
                    font-weight: 600; padding: 6px 18px;
                }
                QPushButton:hover { background: #BA74AD; }
            """)
            top_bar.addWidget(btn)
        layout.addLayout(top_bar)

        self.add_btn.clicked.connect(self.add_record)
        self.edit_btn.clicked.connect(self.edit_record)
        self.delete_btn.clicked.connect(self.delete_record)
        self.export_btn.clicked.connect(self.export_csv)
        self.refresh_btn.clicked.connect(self.load_data)

        self.table = QTableWidget()
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(
            ["Student ID", "Student Name", "Visit Date", "Reason", "Time In", "Time Out"]
        )
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: #FEF1EA;
                font-size: 16px;
                border: 2px solid #FED6C8;
            }
            QTableWidget::item {
                font-size: 16px;
            }
            QHeaderView::section {
                font-size: 17px;
                font-weight: bold;
                background-color: #FED6C8;
                border: 1.5px solid #D295BF;
                color: #3a2b23;
            }
            QTableCornerButton::section {
                background-color: #FED6C8;
                border: 1.5px solid #D295BF;
            }
        """)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.table)
        self.load_data()

        self.setStyleSheet("""
            QWidget#ClinicVisitLogBg {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #FED6C8, stop:1 #F9E6DC);
            }
        """)

    def load_data(self):
        self.table.setRowCount(0)
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                SELECT v.stud_id, 
                       s.stud_lname || ', ' || s.stud_fname || 
                       CASE WHEN s.stud_mname IS NOT NULL AND s.stud_mname <> '' THEN ' ' || s.stud_mname ELSE '' END AS stud_fullname,
                       v.visit_date, v.reason, v.time_in, v.time_out
                FROM clinic_visit_log v
                LEFT JOIN student s ON v.stud_id = s.stud_id
                ORDER BY v.visit_date DESC
            """)
            self.rows = cur.fetchall()
            self.display_rows(self.rows)
            cur.close()
            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Error loading clinic visit log:\n{e}")

    def display_rows(self, rows):
        self.table.setRowCount(len(rows))
        for row_idx, row in enumerate(rows):
            for col_idx, val in enumerate(row):
                self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(val) if val is not None else ""))

    def search_table(self):
        query = self.search_box.text().lower()
        filtered = []
        for row in self.rows:
            if (query in str(row[0]).lower() or
                query in str(row[1]).lower() or
                query in str(row[3]).lower()):
                filtered.append(row)
        self.display_rows(filtered)

    def add_record(self):
        dialog = AddEditDialog(self)
        if dialog.exec_():
            data = dialog.get_data()
            try:
                conn = get_db_connection()
                cur = conn.cursor()
                cur.execute(
                    "INSERT INTO clinic_visit_log (stud_id, visit_date, reason, time_in, time_out) VALUES (%s, %s, %s, %s, %s)",
                    data
                )
                conn.commit()
                cur.close()
                conn.close()
                self.load_data()
            except Exception as e:
                QMessageBox.critical(self, "Database Error", f"Error adding record:\n{e}")

    def edit_record(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "Edit Record", "Please select a row to edit.")
            return
        stud_id = self.table.item(selected, 0).text()
        visit_date = self.table.item(selected, 2).text()
        reason = self.table.item(selected, 3).text()
        time_in = self.table.item(selected, 4).text()
        time_out = self.table.item(selected, 5).text()
        dialog = AddEditDialog(self)
        dialog.stud_id.setText(stud_id)
        dialog.visit_date.setDate(QDate.fromString(visit_date, "yyyy-MM-dd"))
        dialog.reason.setText(reason)
        dialog.time_in.setTime(QTime.fromString(time_in, "HH:mm"))
        dialog.time_out.setTime(QTime.fromString(time_out, "HH:mm"))
        if dialog.exec_():
            new_data = dialog.get_data()
            try:
                conn = get_db_connection()
                cur = conn.cursor()
                cur.execute(
                    "UPDATE clinic_visit_log SET stud_id=%s, visit_date=%s, reason=%s, time_in=%s, time_out=%s WHERE stud_id=%s AND visit_date=%s",
                    (*new_data, stud_id, visit_date)
                )
                conn.commit()
                cur.close()
                conn.close()
                self.load_data()
            except Exception as e:
                QMessageBox.critical(self, "Database Error", f"Error editing record:\n{e}")

    def delete_record(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "Delete Record", "Please select a row to delete.")
            return
        stud_id = self.table.item(selected, 0).text()
        visit_date = self.table.item(selected, 2).text()
        confirm = QMessageBox.question(
            self, "Delete Record",
            f"Delete record for Student ID {stud_id} on {visit_date}?",
            QMessageBox.Yes | QMessageBox.No
        )
        if confirm == QMessageBox.Yes:
            try:
                conn = get_db_connection()
                cur = conn.cursor()
                cur.execute(
                    "DELETE FROM clinic_visit_log WHERE stud_id=%s AND visit_date=%s",
                    (stud_id, visit_date)
                )
                conn.commit()
                cur.close()
                conn.close()
                self.load_data()
            except Exception as e:
                QMessageBox.critical(self, "Database Error", f"Error deleting record:\n{e}")

    def export_csv(self):
        try:
            path, _ = QFileDialog.getSaveFileName(self, "Export CSV", "", "CSV Files (*.csv)")
            if not path:
                return
            with open(path, "w", newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["Student ID", "Student Name", "Visit Date", "Reason", "Time In", "Time Out"])
                for row_idx in range(self.table.rowCount()):
                    rowdata = []
                    for col_idx in range(self.table.columnCount()):
                        item = self.table.item(row_idx, col_idx)
                        rowdata.append(item.text() if item else "")
                    writer.writerow(rowdata)
            QMessageBox.information(self, "Export CSV", f"Exported to {path}")
        except Exception as e:
            QMessageBox.critical(self, "Export Error", f"Error exporting CSV:\n{e}")
